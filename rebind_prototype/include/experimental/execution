#ifndef STD_EXPERIMENTAL_EXECUTION
#define STD_EXPERIMENTAL_EXECUTION

#include <experimental/bits/transform_executor.h>
#include <experimental/bits/try_transform_executor.h>

namespace std {
namespace experimental {
inline namespace concurrency_v2 {
namespace execution {

// Directionality.
constexpr struct oneway_t {} oneway;
constexpr struct twoway_t {} twoway;

// Cardinality.
constexpr struct single_t {} single;
constexpr struct bulk_t {} bulk;

// Blocking behaviour.
constexpr struct never_blocking_t {} never_blocking;
constexpr struct possibly_blocking_t {} possibly_blocking;
constexpr struct always_blocking_t {} always_blocking;

// Whether submitted tasks represent a continuation.
constexpr struct continuation_t {} continuation;
constexpr struct not_continuation_t {} not_continuation;

// Whether there is outstanding work, i.e. an indication of likely task submission in the future.
constexpr struct outstanding_work_t {} outstanding_work;
constexpr struct not_outstanding_work_t {} not_outstanding_work;

// Properties for bulk execution forward progress guarantees.
constexpr struct bulk_sequenced_execution_t {} bulk_sequenced_execution;
constexpr struct bulk_parallel_execution_t {} bulk_parallel_execution;
constexpr struct bulk_unsequenced_execution_t {} bulk_unsequenced_execution;

// Properties for mapping of execution on to threads.
constexpr struct thread_execution_mapping_t {} thread_execution_mapping;
constexpr struct new_thread_execution_mapping_t {} new_thread_execution_mapping;

// Memory allocations.
template<class ProtoAllocator> struct allocator_t { ProtoAllocator alloc; };
template<class ProtoAllocator> constexpr allocator_t<ProtoAllocator> allocator(const ProtoAllocator& a) { return {a}; }

// Type traits to determine conformance to executor type transform_executorments.
template<class Executor> struct is_executor;
template<class Executor> struct is_oneway_executor;
template<class Executor> struct is_twoway_executor;
template<class Executor> struct is_bulk_oneway_executor;
template<class Executor> struct is_bulk_twoway_executor;

template<class Executor> constexpr bool is_executor_v = is_executor<Executor>::value;
template<class Executor> constexpr bool is_oneway_executor_v = is_oneway_executor<Executor>::value;
template<class Executor> constexpr bool is_twoway_executor_v = is_twoway_executor<Executor>::value;
template<class Executor> constexpr bool is_bulk_oneway_executor_v = is_bulk_oneway_executor<Executor>::value;
template<class Executor> constexpr bool is_bulk_twoway_executor_v = is_bulk_twoway_executor<Executor>::value;

// Type trait to obtain an executor's associated context type.
template<class Executor> struct executor_context;

template<class Executor> using executor_context_t = typename executor_context<Executor>::type;

// Type trait to obtain a two way executor's future type.
template<class Executor, class T> struct executor_future;

template<class Executor, class T> using executor_future_t = typename executor_future<Executor, T>::type;

// Type traits to obtain a bulk executor's shape and index types.
template<class Executor> struct executor_shape;
template<class Executor> struct executor_index;

template<class Executor> using executor_shape_t = typename executor_shape<Executor>::type;
template<class Executor> using executor_index_t = typename executor_index<Executor>::type;

// Type traits to determine whether a transform_executor member invocation is valid, and what its result is.
template<class Executor, class Property> struct has_transform_executor_member;
template<class Executor, class Property> struct transform_executor_member_result;

template<class Executor, class Property>
  constexpr bool has_transform_executor_member_v = has_transform_executor_member<Executor, Property>::value;
template<class Executor, class Property>
  using transform_executor_member_result_t = typename transform_executor_member_result<Executor, Property>::type;

namespace
{
  // transform_executor customization point.
  constexpr const auto& transform_executor = transform_executor_impl::customization_point<>;

  // try_transform_executor customization point.
  constexpr const auto& try_transform_executor = try_transform_executor_impl::customization_point<>;
}

// Type trait to determine whether the transform_executor customization point is valid for the specified arguments.
template<class Executor, class... Properties> struct can_transform_executor;

template<class Executor, class... Properties>
  constexpr bool can_transform_executor_v = can_transform_executor<Executor, Properties...>::value;

// Type trait to determine whether the try_transform_executor customization point is valid for the specified arguments.
template<class Executor, class... Properties> struct can_try_transform_executor;

template<class Executor, class... Properties>
  constexpr bool can_try_transform_executor_v = can_try_transform_executor<Executor, Properties...>::value;

// Polymorphic wrappers.
class bad_executor;
class executor;

} // namespace execution
} // inline namespace concurrency_v2
} // namespace experimental
} // namespace std

#include <experimental/bits/is_executor.h>
#include <experimental/bits/is_oneway_executor.h>
#include <experimental/bits/is_twoway_executor.h>
#include <experimental/bits/is_bulk_oneway_executor.h>
#include <experimental/bits/is_bulk_twoway_executor.h>
#include <experimental/bits/executor_context.h>
#include <experimental/bits/executor_future.h>
#include <experimental/bits/executor_shape.h>
#include <experimental/bits/executor_index.h>
#include <experimental/bits/has_transform_executor_member.h>
#include <experimental/bits/transform_executor_member_result.h>
#include <experimental/bits/transform_executor_adaptations.h>
#include <experimental/bits/can_transform_executor.h>
#include <experimental/bits/can_try_transform_executor.h>
#include <experimental/bits/executor.h>

#endif // STD_EXPERIMENTAL_EXECUTION
